// AstroPlanner Get/Set Objects
//
// This is a stripped down version of EAAControl2. It supports fetching selected object(s) in AP and adding object(s) to AP.
// Additionally, this allows the execution of the Quick Observation script.
// Version 0.1 - 5th March 2024
// Version 0.2 - 18th March 2024
// Version 0.3 - 23rd December 2024

// Object passed between AP and calling applications for Get and Put AP object
class APCmdObject
	dim ID as string
	dim Name as string
	dim Type as string
	dim Size as string
	dim Constellation as string
	dim Catalogue as string
	dim Distance as string
	dim GalaxyType as string
	dim PosAngle as integer
	dim Magnitude as double
	dim RA2000 as double
	dim Dec2000 as double
	dim ParallacticAngle as double
	dim AssociatedCount as integer
	
	private sub CreateFromAPObject(Ob as APPlanObject)
		ID=Ob.ID
		Name = Ob.Name
		Type = Ob.Type
		Size = Ob.Size
		Constellation = Ob.Constellation
		Catalogue = Ob.Catalog
		Distance = Ob.GetValueAsString("Distance")
		GalaxyType = ""
		PosAngle = Ob.PosAngle
		Magnitude = Ob.Magnitude
		RA2000 = Ob.RA
		Dec2000 = Ob.Dec
		ParallacticAngle = Ob.ParallacticAngle
		AssociatedCount = Ob.AssociatedObjects().UBound+1
	end sub
	
	// Used by Get and Put commands
	sub Constructor(Ob as APPlanObject)
		CreateFromAPObject(Ob)
	end sub
	
	sub Constructor(Ob as APPlanObject, Distance as string, GalaxyType as string)
		CreateFromAPObject(Ob)
		self.Distance = Distance
		self.GalaxyType = GalaxyType
	end sub
	
	// Used by Search command
	sub Constructor(CatOb as APCatalogObject, Constellation as string, Distance as string, GalaxyType as string)
		ID = CatOb.ID
		Name = CatOb.Name
		Type = CatOb.Type
		Size = CatOb.Size
		Catalogue = CatOb.Catalog
		self.Distance = Distance
		self.GalaxyType = GalaxyType
		self.Constellation = Constellation
		PosAngle = CatOb.PosAngle
		Magnitude = CatOb.Magnitude
		RA2000 = CatOb.RA
		Dec2000 = CatOb.Dec
		ParallacticAngle = 0.0
		AssociatedCount = 0
	end sub
	
	// Serialisation of object JSON
	public function CreateJSONObject() as string
		dim sJSON  as string =""
		sJSON = sJSON + "{""ID"":""" + ReplaceAll(ID,"""","\""") + ""","  + """Name"":""" + ReplaceAll(Name,"""","\""") + ""","  + """Type"":""" + Type + ""","
		sJSON = sJSON + """Size"":""" + ReplaceAll(Size,"""","\""") + ""","  + """Constellation"":""" + Constellation + ""","  + """Catalogue"":""" + Catalogue + ""","
		sJSON = sJSON + """Distance"":""" + Distance + ""","
		sJSON = sJSON + """GalaxyType"":""" + GalaxyType + ""","
		sJSON = sJSON + """PosAngle"":" + DoubleToStr(PosAngle) + ","  + """Magnitude"":" + DoubleToStr(Magnitude) + ","
		sJSON = sJSON + """RA2000"":" + DoubleToStr(RA2000) + ","  + """Dec2000"":" + DoubleToStr(Dec2000) + ","  + """ParallacticAngle"":" + DoubleToStr(ParallacticAngle) + "," + """Associated"":" + Str(AssociatedCount) + "}"
		return sJSON
	end function
	
end class

// GetObjects Option 1=First selected, 2=All selected, 3=Object of type=ObjType,4=All objects in plan.
// {"Cmd":2,"Option":1,"ObjType":"extMinor"}
sub GetObjects(iOption as integer, sType as string, ByRef Result as JSON)
	dim Objects() as APPlanObject
	Debug "GetObjects:  Option=", iOption, " Type=", sType
	// Fetch the required objects into an array
	select case iOption
	case 1	// First selected
		if Plan.SelectedObject <> nil then
			Objects.Append Plan.SelectedObject()
		end if
		break
	case 2	// All selected
		Objects = Plan.SelectedObjects()
		break
	case 3	// Objects of specified type
		dim tmpObj as APPlanObject
		for each tmpObj in Plan.Objects()
			if tmpObj.Type = sType then
				Objects.Append tmpObj
			end if
		next
		break
	case  4 // All objects
		Objects = Plan.Objects()
		break
	end select
	
	Debug "GetObjects: Count=", Objects.UBound+1
	
	// Create a JSON doc of objects
	if Objects.UBound >= 0 then
		dim Ob as APPlanObject
		dim doc as string = "{""Objects"":["
		dim bFirst as boolean = true
		
		for each Ob in Objects
			// Add object to JSON
			if not bFirst then
				doc = doc + ","
			else
				bFirst = false
			end if
			
			dim APCmdObject as new APCmdObject(Ob)
			
			doc = doc + APCmdObject.CreateJSONObject()
		next
		doc = doc + "]}"
		Debug "Objects: ",doc
		Result.Load(doc)
	end if
end sub

function FindPlanObject(ID as string) as APPlanObject
	dim obj as APPlanObject
	for each obj in Plan.Objects()
		if obj.ID = ID then
			return obj
		end if
	next
	return nil
end function

// PutObjects Option 1=Add objects, 2=Update objects
// {"Cmd":1,"Option":1,"Objects":[{"Name":"M45","RA":16.4567},{"Name":"NGC456","RA":14.4567}]}
sub PutObjects(iOption as integer, ByRef oCmd as JSON)
	dim a,b as JSON = new JSON()
	dim obj as APPlanObject
	
	a = oCmd.Child("Objects")
	
	dim i as integer
	
	for i=0 to a.Count-1
		b =a.Child(i)
		Debug b.Child("ID"), b.Child("Name"), b.Child("Type"), b.Child("Size"), b.Child("RA2000"), b.Child("Dec2000")
		if iOption = 1 then
			// Add object to plan
			obj = Plan.NewObject()
			obj.ID = b.Child("ID")
			obj.Name = b.Child("Name")
			obj.Type = b.child("Type")
			obj.Size = b.Child("Size")
			obj.PosAngle = b.Child("PosAngle")
		elseif iOption = 2 then
			// Find object in plan to update
			obj = FindPlanObject(b.Child("ID"))
		end if
		if  not (obj is nil) then
			// Common add and update parameters
			obj.RA = b.child("RA2000")
			obj.Dec = b.child("Dec2000")
			obj.Magnitude = b.child("Magnitude")
		end if
	next i
	
end sub

sub SearchObjects(iOption as integer, Params as string, ByRef Result as JSON)
	
	dim oSearch as APSearch = new APSearch
	
	// Get search filters
	dim Magnitude as double = 999
	dim bNoMag as boolean = false
	dim sPA() as string = Split(Params,"|")
	Debug "SearchObjects:",Params, UBound(sPA)
	
	// If no RA/Dec and no selected object then nothing to search
	if sPA(4)="999" and Plan.nSelectedObjects = 0 then
		return
	end if
	
	if sPA(0) <> "" then Magnitude = CDbl(sPA(0))
	if sPA(2) = "1" then bNoMag = true
	
	// Add a magnitude bounds if we have set a magnitude and don't want objects without a magnitude.
	if sPA(0) <> "" and not bNoMag then
		oSearch.AddBound(APSearch.item_Magnitude, APSearch.rel_LE, Magnitude)
	end if
	
	if sPA(1) <> "" then
		select case sPA(1)
		case "All"
			oSearch.FindAll()
		case "Star"
			oSearch.AddType(APSearch.type_Star)
			oSearch.AddType(APSearch.type_BeStar)
			oSearch.AddType(APSearch.type_BrownDwarf)
			oSearch.AddType(APSearch.type_CarbonStar)
			oSearch.AddType(APSearch.type_RedDwarf)
			oSearch.AddType(APSearch.type_WhiteDwarf)
			oSearch.AddType(APSearch.type_WolfRayetStar)
		case "Galaxy"
			oSearch.AddType(APSearch.type_Galaxy)
		case "Quasar"
			oSearch.AddType(APSearch.type_Quasar)
		case "Double"
			oSearch.AddType(APSearch.type_Double)
			oSearch.AddType(APSearch.type_Triple)
			oSearch.AddType(APSearch.type_Multiple)
		case "Variable"
			oSearch.AddType(APSearch.type_Variable)
		case "Cluster"
			oSearch.AddType(APSearch.type_Globular)
			oSearch.AddType(APSearch.type_Open)
			oSearch.AddType(APSearch.type_StarCloud)
		case "Nebula"
			oSearch.AddType(APSearch.type_BrightNeb)
			oSearch.AddType(APSearch.type_DarkNeb)
			oSearch.AddType(APSearch.type_DiffuseNeb)
			oSearch.AddType(APSearch.type_EmissionNeb)
			oSearch.AddType(APSearch.type_HerbigHaro)
			oSearch.AddType(APSearch.type_HIIRegion)
			oSearch.AddType(APSearch.type_MolecularCloud)
			oSearch.AddType(APSearch.type_Nebula)
			oSearch.AddType(APSearch.type_Nebulosity)
			oSearch.AddType(APSearch.type_PlanetaryNeb)
			oSearch.AddType(APSearch.type_ReflectionNeb)
		end select
	end if
	
	oSearch.MaxResults = 2000
	
	if sPA(4) <> "999" then
		oSearch.WithinDistance(CDbl(sPA(3)), CDbl(sPA(4)), CDbl(sPA(5)))
	else
		oSearch.WithinDistance(CDbl(sPA(3)), Plan.SelectedObject().RA, Plan.SelectedObject().Dec)
	end if
	
	call oSearch.Search(true)
	
	Debug "Search Count=", oSearch.nObjects
	if oSearch.nObjects > 0 then
		dim i,cnt as integer = 0
		dim doc as string = "{""Objects"":["
		dim oCatObj as APCatalogObject
		
		for i=1 to oSearch.nObjects
			oCatObj = oSearch.GetObject(i)
			
			Debug oCatObj.ID, oCatObj.Magnitude
			if bNoMag and Magnitude <> 999 then
				if oCatObj.Magnitude <> 999 and oCatObj.Magnitude > Magnitude then
					Debug "Continue"
					continue
				end if
			end if
			
			if cnt>0 then
				doc = doc + ","
			end if
			
			dim oConst as Constellation = Constellation.GetConstellation(oCatObj.RA, oCatObj.Dec)
			
			dim sDistance, sGalaxyType as string
			
			// HyperLEDA extra data
			if oCatObj.Catalog = "HyperLEDA Galaxy Catalogue" And (oCatObj.Type = "Galaxy" or oCatObj.Type="Quasar" or oCatObj.Type="GalGrp") then
				dim iStart as integer = Instr(oCatObj.CatalogNotes,"Type: ")
				dim iEnd as integer
				
				if iStart > 0 then
					
					iEnd = Instr(iStart+6,oCatObj.CatalogNotes,",")
					
					if iEnd=0 then iEnd = Len(oCatObj.CatalogNotes)
					
					sGalaxyType = Trim(Mid(oCatObj.CatalogNotes, iStart+6, iEnd-(iStart+6)))
				end if
				
				iStart = Instr(oCatObj.CatalogNotes,"RV: ")
				if iStart > 0 then
					iEnd = Instr(iStart+4,oCatObj.CatalogNotes,"km")
					sDistance = Trim(Mid(oCatObj.CatalogNotes, iStart+4, iEnd-(iStart+4)))
				end if
				
			end if
			
			// Quasar Active Galactic Nuclei Catalogue extra data
			if oCatObj.Catalog = "Quasar and Active Galactic Nuclei Catalogue" then
				dim iStart as integer = Instr(oCatObj.CatalogNotes,"z=")
				if iStart > 0 then
					dim dblDistance as double = CDbl(Trim(Mid(oCatObj.CatalogNotes, iStart + 2)))
					// Convert z to km/s
					dblDistance = dblDistance * 299792.458
					sDistance = DoubleToStr(dblDistance,0)
				end if
			end if
			
			dim Ob as APCmdObject = new APCmdObject(oCatObj, oConst.Abbreviation, sDistance, sGalaxyType)
			doc = doc + Ob.CreateJSONObject()
			cnt = cnt + 1
		next i
		
		doc = doc + "]}"
		Debug "doc=",doc
		Result.Load(doc)
		Debug "Search doc=",Result.ToString
	end if
end sub


sub SetSession()
	dim dtNow as Date = Plan().LocalDateTime
	
	Debug "Sess Cnt:", APSession.Count
	
	if APSession.Count >0 then
		dim oSession as APSession = APSession.Session(APSession.Count)
		dim dtSessEnd as Date = oSession.Finish
		if dtSessEnd+3600 > dtNow then
			// There was a session in the last hour. Use that session
			dtNow = dtNow + 3600
			oSession.Finish = dtNow.TotalSeconds
		else
			// There was NO session within the last hour. Create a new one.
			dim oNewSession as APSession = APSession.NewSession(Plan().LocalDateTime)
			oNewSession.Finish = dtNow + 3600
			
			// Specify the location
			if APResource.Default(APResource.rsrc_Site) <> nil then
				oNewSession.Site = APResource.Default(APResource.rsrc_Site).Name
			end if
			
			//Specify the observer
			if  APResource.Default(APResource.rsrc_Observer) <> nil then
				ONewSession.Observer = APResource.Default(APResource.rsrc_Observer).Name
			end if
		end if
	end if
end sub

sub PopulateObjectFields(ByRef Obs as APObservation, ByRef Obj as APPlanObject)
	
	// Create a dictionary of object fields
	dim dicOF as new Dictionary
	
	dicOF.Value("Alt") = AngleFormatted(obj.Altitude,2)
	dicOF.Value("Az") = AngleFormatted(obj.Azimuth,2)
	dicOF.Value("RA") = FormatRA(obj.RA,2)
	dicOF.Value("Dec") = FormatDec(obj.Dec,2)
	
	dicOF.Value("Air Mass") = DoubleToStr(obj.AirMass,2)
	dicOF.Value("Extinct") = DoubleToStr(obj.Extinction,2)
	dicOF.Value("Con") = obj.Constellation
	dicOF.Value("Sun") = AngleFormatted(obj.SunDistance,2)
	dicOF.Value("Moon") = AngleFormatted(obj.MoonDistance,2)
	dicOF.Value("Vis") = obj.Visible
	dicOF.Value("Par") = AngleFormatted(obj.ParallacticAngle,2)
	
	dicOF.Value("App Mag") = DoubleToStr(obj.ApparentMagnitude,2)
	dicOF.Value("SB") = DoubleToStr(obj.SurfaceBrightness,2)
	
	// Assign the object fields to the observation
	Obs.ObjectFields = dicOF
	
end sub

sub LogObservation(ByRef obj as APPlanObject, Notes as string)
	
	dim oObs as APObservation = obj.NewObservation(Plan.LocalDateTime, 0)
	oObs.Notes = Notes
	
	// Add the object fields to the observation
	PopulateObjectFields(oObs, obj)
	
	// Specify default telescope
	if TelescopeResource.Default <> nil then oObs.Telescope = TelescopeResource.Default.Name
	
	// Specify default imager
	if ImagerResource.Default<>nil then oObs.Imager = ImagerResource.Default.Name
	
	// Associate observation with current plan
	oObs.Plan = Plan().FilePath
	
	// Save the observation
	oObs.Save()
end sub

function CreateCaption(Multiple as boolean, ID as string, Count as integer) as string
	dim caption as string
	
	if Len(ID) > 30 then ID = Left(ID,30) + "..."
	if Multiple then
		caption = ID + " + " + Str(Count) + " more objects"
	else
		caption = ID
	end if
	
	// Pad the caption to create the width of the dialog
	if len(caption) < 70 then
		dim i as integer
		for i=len(caption) to 70
			caption = caption + " "
		next
		caption = caption + "."
	end if
	
	return caption
end function

sub QuickObservation(LogAssociated as integer, Notes as string)
	dim MultipleObjects as boolean = false
	
	if Plan.nSelectedObjects = 0 then
		Speak("No object selected")
		return
	end if
	
	// Fetch the object(s) that will be logged
	dim Objects() as APPlanObject
	dim obj as APPlanObject
	
	if Plan.nSelectedObjects > 1 then
		// Log multiple selected objects.
		Objects = Plan.SelectedObjects()
		MultipleObjects = true
	else
		// Only single selected objects can have their associated objects logged as well.
		obj = Plan.SelectedObject
		if obj.IsInAssociation then
			// Log the selected object
			Objects = obj.AssociatedObjects(true)
		end if
	end if
	
	dim ObjectCount as integer = UBound(Objects)
	
	dim bAssociated as boolean = false
	if not MultipleObjects and ObjectCount > 0 then
		if LogAssociated = 1 then
			bAssociated = true
		end if
	end if
	
	// Setup a new observing session if required.
	SetSession()
	
	if (bAssociated or MultipleObjects) and ObjectCount > 0 then
		// Add an observation to the main object and any associated objects or add an observation to each selected object.
		Debug "Objects=", ObjectCount
		dim i as integer
		for i=0 to ObjectCount
			dim objtmp as APPlanObject = Objects(i)
			LogObservation(objtmp, Notes)
		next i
		Speak("Observations for " + Str(ObjectCount+1) + " objects logged.")
	else
		// Add an observation to the selected object only (no associated objects)
		LogObservation(obj, Notes)
		Speak("Observation logged")
	end if
end sub

sub EncodeURI(ByRef url as string)
	url = ReplaceAll(url,"'","%27")
	url = ReplaceAll(url," ","%20")
end sub

function FormatNumber(sInput as String, iDecpts as integer) as string
	dim dblInput as double = 0
	dblInput= CDbl(sInput)
	return DoubleToStr(dblInput, iDecpts)
end function

sub main()
	
	dim iCmd, iOption as integer = 0
	dim result as new JSON()
	
	// Comment the line below, to turn on debugging messages.
	DebugOff()
	
	// Get the incoming parameters
	dim oCmd as JSON = WebServer.LaunchParameters
	Debug "JSON in=",oCmd.ToString
	iCmd = oCmd.Lookup("Cmd", 0)
	iOption = oCmd.Lookup("Option",0)
	
	select case iCmd
	case 0
		// Keep Alive command
		break
	case 1
		Debug "Cmd: GetObjects"
		GetObjects(iOption,oCmd.Lookup("ObjType",""), result)
		break
	case 2
		Debug "Cmd: PutObjects"
		PutObjects(iOption, oCmd)
		break
	case 3
		Debug("Cmd: QuickObservation")
		QuickObservation(iOption,oCmd.Lookup("Notes",""))
		break
	case 5
		Debug("Cmd: Search")
		SearchObjects(iOption,oCmd.Lookup("Params",""), result)
		break
	end select
	Debug result.ToString
	// Pass the results back to the calling user
	WebServer.ReturnResults(result)
	result.Clear()
	
end sub